{
  "version": 3,
  "sources": ["../src/base.ts", "../src/path.ts", "../src/index.ts"],
  "sourcesContent": ["interface IModuleBase {\n    name: string\n}\n\nclass ModuleBase {\n    protected moduleBase: IModuleBase\n\n    constructor(name?: string) {\n        this.moduleBase = {\n            name: name || 'No module base name.'\n        }\n    }\n\n    systemError(functionName: string, message: string, object: any = 'no_message'): never {\n        if (object !== 'no_message') {\n            console.log('%c error object is : ', 'color:#FFF; background:red')\n            console.log(object)\n        }\n        throw new Error(`(\u2609\u0434\u2299)!! ${this.moduleBase.name} => ${functionName} -> ${message}`)\n    }\n}\n\nexport default ModuleBase\n", "import ModuleBase from './base'\n\ninterface Point {\n    x: number\n    y: number\n}\n\ninterface PointData {\n    p1x: number\n    p1y: number\n    p2x: number\n    p2y: number\n    ex: number\n    ey: number\n}\n\ninterface Offset {\n    x: number\n    y: number\n}\n\ntype CompileMode = 'path' | 'polygon' | 'polyline'\n\nclass Path extends ModuleBase {\n    points: PointBase[]\n    length: number\n    cacheMode: boolean\n    siteCaches: Point[]\n    lengthCaches: number[]\n\n    constructor(data?: string, mode?: CompileMode) {\n        super('Path')\n        this.points = []\n        this.length = 0\n        this.cacheMode = false\n        this.siteCaches = []\n        this.lengthCaches = []\n        if (data) {\n            let type = typeof data\n            if (type === 'string') {\n                this.compile(data.trim(), mode)\n            }\n        }\n    }\n\n    compile(data: string, mode: CompileMode = 'path'): void {\n        let list = {\n            a: 'arc',\n            m: 'moveTo',\n            l: 'lineTo',\n            h: 'horizontalLineTo',\n            v: 'verticalLineTo',\n            c: 'curve',\n            q: 'quadraticBezierCurve',\n            s: 'smoothCurve',\n            t: 'smoothQuadraticBezierCurve',\n            z: 'closePath'\n        }\n        const paramCounts = {\n            m: 2, // moveTo: x, y\n            l: 2, // lineTo: x, y\n            h: 1, // horizontalLineTo: x\n            v: 1, // verticalLineTo: y\n            c: 6, // curve: x1, y1, x2, y2, x, y\n            q: 4, // quadraticBezierCurve: x1, y1, x, y\n            s: 4, // smoothCurve: x2, y2, x, y\n            t: 2, // smoothQuadraticBezierCurve: x, y\n            a: 7, // arc: rx, ry, rotation, large-arc, sweep, x, y\n            z: 0 // closePath: \u7121\u53C3\u6578\n        }\n        const chunkArray = <T>(arr: T[], size: number): T[][] => {\n            let result = []\n            for (let i = 0; i < arr.length; i += size) {\n                result.push(arr.slice(i, i + size))\n            }\n            return result\n        }\n        if (mode === 'path') {\n            let keys = Object.keys(list)\n            let index = -1\n            let params = ['']\n            for (let i = 0; i < data.length; i++) {\n                if (/[a-zA-z]/.test(data[i])) {\n                    index += 1\n                    params[index] = ''\n                }\n                if (data[i] === '-') {\n                    params[index] += ' '\n                }\n                params[index] += data[i]\n            }\n            for (let param of params) {\n                let pt = param.trim()\n                let key = pt.slice(0, 1)\n                let data = pt.slice(1).split(/,|\\s/).filter((t) => t !== '').map((d) => {\n                    return Number(d)\n                })\n                let count = paramCounts[key.toLowerCase() as keyof typeof paramCounts]\n                let units = chunkArray(data, count)\n                if (keys.indexOf(key.toLowerCase()) !== -1) {\n                    let isAbs = /[A-Z]/.test(key)\n                    for (let unit of units) {\n                        // @ts-ignore\n                        this[list[key.toLowerCase()]](...unit, isAbs)\n                    }\n                } else {\n                    this.systemError('compile', 'Key name not found', key)\n                }\n            }\n        } else if (mode === 'polygon') {\n            this.readPolyline(data)\n            this.closePath()\n        } else if (mode === 'polyline') {\n            this.readPolyline(data)\n        }\n    }\n\n    readPolyline(data: string): void {\n        let params = ''\n        for (let i = 0; i < data.length; i++) {\n            if (data[i] === '-') {\n                params += ' '\n            }\n            params += data[i]\n        }\n        const pos = params.split(/,|\\s/).filter((t) => t !== '').map((d) => {\n            return Number(d)\n        })\n        this.moveTo(pos[0], pos[1], true)\n        for (let i = 2; i < data.length; i += 2) {\n            this.lineTo(pos[i], pos[i + 1], true)\n        }\n    }\n\n    eachPoint(callback: (point: PointBase) => void): void {\n        let len = this.points.length\n        for (let i = 0; i < len; i++) {\n            callback(this.points[i])\n        }\n    }\n\n    addPoint(point: PointBase): void {\n        if (point.error) {\n            this.systemError('addPoint', point.error, point)\n        }\n        this.lengthCaches.push(this.length)\n        this.points.push(point)\n        this.length += point.length\n    }\n\n    setCache(enable: boolean): void {\n        this.cacheMode = !!enable\n        this.siteCaches = []\n    }\n\n    addPath(path: Path): void {\n        this.compile(path.toPathString())\n    }\n\n    render(context: CanvasRenderingContext2D): void {\n        context.beginPath()\n        this.eachPoint((point) => {\n            point.render(context)\n        })\n    }\n\n    toPathString(): string {\n        let string = ''\n        this.eachPoint((point) => {\n            string += point.toPathString()\n        })\n        return string\n    }\n\n    getLastPoint(): { ex: number, ey: number } {\n        return this.points.length === 0 ? { ex: 0, ey: 0 } : this.points.slice(-1)[0]\n    }\n\n    getLastPosition(): Point {\n        let p = this.points[this.points.length - 1]\n        return p ? p.getLastPosition() : { x: 0, y: 0 }\n    }\n\n    getLinePosition(t: number): Point {\n        if (this.cacheMode && this.siteCaches[t]) {\n            return this.siteCaches[t]\n        }\n        let target = null\n        let site = null\n        let dis = this.length * t\n        let len = this.points.length\n        let index = 0\n        if (this.lengthCaches.length > 10) {\n            let range = 10\n            let length = Math.floor(this.lengthCaches.length * (1 / range))\n            for (let i = 1; i < range; i++) {\n                if (dis <= this.lengthCaches[i * length]) {\n                    break\n                }\n                index = (i - 1) * length\n            }\n            dis -= this.lengthCaches[index]\n        }\n\n        for (let i = index; i < len; i++) {\n            if (dis <= this.points[i].length) {\n                if (this.points[i]) {\n                    target = this.points[i]\n                    break\n                }\n            } else {\n                dis -= this.points[i].length\n            }\n        }\n\n        if (target) {\n            site = target.getLinePosition(dis / target.length)\n        } else {\n            site = this.getLastPosition()\n        }\n        if (this.cacheMode && this.siteCaches.length <= 2000) {\n            this.siteCaches[t] = site\n        }\n        return site\n    }\n\n    getRect(): { x: number, y: number, width: number, height: number } {\n        if (this.points.length === 0) {\n            return {\n                x: 0,\n                y: 0,\n                width: 0,\n                height: 0\n            }\n        }\n\n        let minX = Infinity\n        let minY = Infinity\n        let maxX = -Infinity\n        let maxY = -Infinity\n\n        const updateBounds = (x: number, y: number) => {\n            minX = Math.min(minX, x)\n            minY = Math.min(minY, y)\n            maxX = Math.max(maxX, x)\n            maxY = Math.max(maxY, y)\n        }\n\n        this.eachPoint((point) => {\n            // \u6AA2\u67E5\u8D77\u9EDE\n            updateBounds(point.sx, point.sy)\n            // \u6AA2\u67E5\u7D42\u9EDE\n            updateBounds(point.ex, point.ey)\n\n            // \u5C0D\u65BC\u66F2\u7DDA\u985E\u578B\u7684\u9EDE\uFF0C\u4E5F\u6AA2\u67E5\u63A7\u5236\u9EDE\n            if (point instanceof PointBase.Curve\n              || point instanceof PointBase.QuadraticBezierCurve\n              || point instanceof PointBase.SmoothCurve) {\n                updateBounds(point.p1x, point.p1y)\n                updateBounds(point.p2x, point.p2y)\n            }\n\n            // \u5C0D\u65BC\u5F27\u7DDA\uFF0C\u53D6\u6A23\u591A\u500B\u9EDE\u4F86\u78BA\u4FDD\u6E96\u78BA\u6027\n            if (point instanceof PointBase.Arc) {\n                for (let i = 0; i <= 100; i++) {\n                    const pos = point.getLinePosition(i / 100)\n                    updateBounds(pos.x, pos.y)\n                }\n            }\n        })\n\n        return {\n            x: minX,\n            y: minY,\n            width: maxX - minX,\n            height: maxY - minY\n        }\n    }\n\n    getDirection(t: number): number {\n        let to = t + 0.01\n        let p1 = this.getLinePosition(t)\n        let p2 = this.getLinePosition(to)\n        return Supports.getAngle(p1.x, p1.y, p2.x, p2.y) - 270\n    }\n\n    moveTo(x: number, y: number, abs: boolean = false): this {\n        this.addPoint(new PointBase.MoveTo(this, this.getLastPoint(), x, y, abs))\n        return this\n    }\n\n    lineTo(x: number, y: number, abs: boolean = false): this {\n        this.addPoint(new PointBase.LineTo(this, this.getLastPoint(), x, y, abs))\n        return this\n    }\n\n    curve(x1: number, y1: number, x2: number, y2: number, x: number, y: number, abs: boolean = false): this {\n        this.addPoint(new PointBase.Curve(this, this.getLastPoint(), x1, y1, x2, y2, x, y, abs))\n        return this\n    }\n\n    quadraticBezierCurve(x1: number, y1: number, x: number, y: number, abs: boolean = false): this {\n        this.addPoint(new PointBase.QuadraticBezierCurve(this, this.getLastPoint(), x1, y1, x, y, abs))\n        return this\n    }\n\n    smoothCurve(x2: number, y2: number, x: number, y: number, abs: boolean = false): this {\n        this.addPoint(new PointBase.SmoothCurve(this, this.getLastPoint(), x2, y2, x, y, abs))\n        return this\n    }\n\n    smoothQuadraticBezierCurve(x: number, y: number, abs: boolean = false): this {\n        this.addPoint(new PointBase.SmoothQuadraticBezierCurve(this, this.getLastPoint() as any, x, y, abs))\n        return this\n    }\n\n    horizontalLineTo(x: number, abs: boolean = false): this {\n        this.addPoint(new PointBase.HorizontalLineTo(this, this.getLastPoint(), x, abs))\n        return this\n    }\n\n    verticalLineTo(y: number, abs: boolean = false): this {\n        this.addPoint(new PointBase.VerticalLineTo(this, this.getLastPoint(), y, abs))\n        return this\n    }\n\n    arc(rx: number, ry: number, rotation: number, large: number, sweep: number, x: number, y: number, abs: boolean = false): this {\n        this.addPoint(new PointBase.Arc(this, this.getLastPoint(), rx, ry, rotation, large, sweep, x, y, abs))\n        return this\n    }\n\n    closePath(): this {\n        let target = this.points.filter((p) => {\n            return p instanceof PointBase.MoveTo\n        }).pop()\n        this.addPoint(new PointBase.ClosePath(this, this.getLastPoint(), target!))\n        return this\n    }\n}\n\nclass Supports {\n    static getDistance(x: number, y: number, ax: number, ay: number): number {\n        return Math.sqrt(Math.pow((ax - x), 2) + Math.pow((ay - y), 2))\n    }\n\n    static getAngle(x: number, y: number, ax: number, ay: number): number {\n        if (x === ax && y === ay) {\n            return 0\n        }\n        var angle = Math.atan2((ay - y), (ax - x)) * 180 / Math.PI\n        return angle > 0 ? angle : 360 + angle\n    }\n\n    static getSvgLength(d: string): number {\n        const pathElement = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n        pathElement.setAttributeNS(null, 'd', d)\n        return pathElement.getTotalLength()\n    }\n}\n\nclass PointBase {\n    error: string | null\n    path: Path\n    parent: { ex: number, ey: number }\n    offset: Offset\n    _absolute: boolean\n    length: number\n    data: PointData\n\n    // \u975C\u614B\u5B50\u985E\u5C6C\u6027\u8072\u660E\n    static MoveTo: typeof MoveTo\n    static LineTo: typeof LineTo\n    static HorizontalLineTo: typeof HorizontalLineTo\n    static VerticalLineTo: typeof VerticalLineTo\n    static Curve: typeof Curve\n    static QuadraticBezierCurve: typeof QuadraticBezierCurve\n    static SmoothCurve: typeof SmoothCurve\n    static SmoothQuadraticBezierCurve: typeof SmoothQuadraticBezierCurve\n    static Arc: typeof Arc\n    static ClosePath: typeof ClosePath\n\n    constructor(path: Path, parent: { ex: number, ey: number }, absolute: boolean = false) {\n        this.error = null\n        this.length = 0\n        this.data = {\n            p1x: 0,\n            p1y: 0,\n            p2x: 0,\n            p2y: 0,\n            ex: 0,\n            ey: 0\n        }\n        this.path = path\n        this.parent = parent\n        this.offset = { x: 0, y: 0 }\n        this.absolute = !!absolute\n        this._absolute = !!absolute\n    }\n\n    set absolute(absolute: boolean) {\n        this._absolute = !!absolute\n        this.offset.x = absolute ? 0 : this.sx\n        this.offset.y = absolute ? 0 : this.sy\n    }\n\n    get absolute(): boolean { return this._absolute }\n\n    get sx(): number { return this.parent.ex }\n    get sy(): number { return this.parent.ey }\n\n    get ex(): number { return this.data.ex + this.offset.x }\n    set ex(val: number) { this.data.ex = val }\n\n    get ey(): number { return this.data.ey + this.offset.y }\n    set ey(val: number) { this.data.ey = val }\n\n    get p1x(): number { return this.data.p1x + this.offset.x }\n    set p1x(val: number) { this.data.p1x = val }\n\n    get p1y(): number { return this.data.p1y + this.offset.y }\n    set p1y(val: number) { this.data.p1y = val }\n\n    get p2x(): number { return this.data.p2x + this.offset.x }\n    set p2x(val: number) { this.data.p2x = val }\n\n    get p2y(): number { return this.data.p2y + this.offset.y }\n    set p2y(val: number) { this.data.p2y = val }\n\n    resetReference(path: Path, parent?: { ex: number, ey: number }): void {\n        this.path = path\n        this.parent = parent || this.parent\n    }\n\n    initData(): void {\n        this.length = 0\n        this.data = {\n            p1x: 0,\n            p1y: 0,\n            p2x: 0,\n            p2y: 0,\n            ex: 0,\n            ey: 0\n        }\n    }\n\n    resetData(options: Partial<PointData>): void {\n        for (let key in options) {\n            // @ts-ignore\n            if (this.data[key] != null) {\n                // @ts-ignore\n                this[key] = options[key]\n            }\n        }\n        this.refresh()\n    }\n\n    refresh(): void {\n        this.length = this.getLength()\n    }\n\n    getLength(): number {\n        return 0\n    }\n\n    getLastPosition(): Point {\n        return {\n            x: this.ex,\n            y: this.ey\n        }\n    }\n\n    getType(): string {\n        return this.toPathString().trim()[0]\n    }\n\n    render(context: CanvasRenderingContext2D): void {}\n    toPathString(): string { return '' }\n    getLinePosition(t?: number): Point { return { x: 0, y: 0 } }\n}\n\nclass MoveTo extends PointBase {\n    constructor(path: Path, parent: { ex: number, ey: number }, x: number, y: number, absolute: boolean) {\n        super(path, parent, absolute)\n        this.resetData({\n            ex: x,\n            ey: y\n        })\n    }\n\n    render(context: CanvasRenderingContext2D): void {\n        context.moveTo(this.ex, this.ey)\n    }\n\n    toPathString(): string {\n        return `M${this.ex},${this.ey}`\n    }\n\n    getLinePosition(): Point {\n        return {\n            x: this.ex,\n            y: this.ey\n        }\n    }\n\n    getPositionX(): number {\n        return this.ex\n    }\n\n    getPositionY(): number {\n        return this.ey\n    }\n}\n\nclass LineTo extends PointBase {\n    constructor(path: Path, parent: { ex: number, ey: number }, x: number, y: number, absolute: boolean) {\n        super(path, parent, absolute)\n        this.resetData({\n            ex: x,\n            ey: y\n        })\n    }\n\n    render(context: CanvasRenderingContext2D): void {\n        context.lineTo(this.ex, this.ey)\n    }\n\n    toPathString(): string {\n        return `L${this.ex},${this.ey}`\n    }\n\n    getLinePosition(t: number): Point {\n        return {\n            x: this.sx * (1 - t) + this.ex * t,\n            y: this.sy * (1 - t) + this.ey * t\n        }\n    }\n\n    getLength(): number {\n        return Supports.getDistance(this.sx, this.sy, this.ex, this.ey)\n    }\n}\n\nclass HorizontalLineTo extends LineTo {\n    constructor(path: Path, parent: { ex: number, ey: number }, x: number, absolute: boolean) {\n        super(path, parent, x, absolute ? parent.ey : 0, absolute)\n    }\n\n    toPathString(): string {\n        return `H${this.ex}`\n    }\n}\n\nclass VerticalLineTo extends LineTo {\n    constructor(path: Path, parent: { ex: number, ey: number }, y: number, absolute: boolean) {\n        super(path, parent, absolute ? parent.ex : 0, y, absolute)\n    }\n\n    toPathString(): string {\n        return `V${this.ey}`\n    }\n}\n\nclass Curve extends PointBase {\n    constructor(path: Path, parent: { ex: number, ey: number }, x1: number, y1: number, x2: number, y2: number, x: number, y: number, absolute: boolean = false) {\n        super(path, parent, absolute)\n        this.resetData({\n            p1x: x1,\n            p1y: y1,\n            p2x: x2,\n            p2y: y2,\n            ex: x,\n            ey: y\n        })\n    }\n\n    getStep(): number {\n        return 100\n    }\n\n    getPoint(t: number, s: number, p1: number, p2: number, e: number): number {\n        return s * (1 - t) * (1 - t) * (1 - t) + 3 * p1 * (1 - t) * (1 - t) * t + 3 * p2 * (1 - t) * t * t + e * t * t * t\n    }\n\n    getLength(): number {\n        if (Compatibility.GeometryElement) {\n            return Supports.getSvgLength(`M${this.sx},${this.sy}` + this.toPathString())\n        }\n        var x = 0\n        var y = 0\n        var t = 0\n        var length = 0\n        var steps = this.getStep()\n        var previousDotX = 0\n        var previousDotY = 0\n        for (let i = 0; i <= steps; i++) {\n            t = i / steps\n            x = this.getPoint(t, this.sx, this.p1x, this.p2x, this.ex)\n            y = this.getPoint(t, this.sy, this.p1y, this.p2y, this.ey)\n            if (i > 0) {\n                var diffX = x - previousDotX\n                var diffY = y - previousDotY\n                length += Math.sqrt(diffX * diffX + diffY * diffY)\n            }\n            previousDotX = x\n            previousDotY = y\n        }\n        return length\n    }\n\n    render(context: CanvasRenderingContext2D): void {\n        context.bezierCurveTo(this.p1x, this.p1y, this.p2x, this.p2y, this.ex, this.ey)\n    }\n\n    toPathString(): string {\n        return `C${this.p1x},${this.p1y},${this.p2x},${this.p2y},${this.ex},${this.ey}`\n    }\n\n    getLinePosition(t: number): Point {\n        return {\n            x: this.getPoint(t, this.sx, this.p1x, this.p2x, this.ex),\n            y: this.getPoint(t, this.sy, this.p1y, this.p2y, this.ey)\n        }\n    }\n}\n\nclass QuadraticBezierCurve extends Curve {\n    constructor(path: Path, parent: { ex: number, ey: number }, p1x: number, p1y: number, ex: number, ey: number, absolute: boolean = false) {\n        super(path, parent, p1x, p1y, p1x, p1y, ex, ey, absolute)\n    }\n\n    get p2x(): number { return this.p1x };\n    set p2x(val: number) { this.data.p2x = val }\n\n    get p2y(): number { return this.p1y };\n    set p2y(val: number) { this.data.p2y = val }\n\n    render(context: CanvasRenderingContext2D): void {\n        context.quadraticCurveTo(this.p1x, this.p1y, this.ex, this.ey)\n    }\n\n    toPathString(): string {\n        return `Q${this.p1x},${this.p1y},${this.ex},${this.ey}`\n    }\n\n    getPoint(t: number, s: number, p1: number, p2: number, e: number): number {\n        return (1 - t) * (1 - t) * s + 2 * t * (1 - t) * p1 + t * t * e\n    }\n}\n\nclass SmoothCurve extends Curve {\n    constructor(path: Path, parent: { ex: number, ey: number }, p2x: number, p2y: number, ex: number, ey: number, absolute: boolean = false) {\n        super(path, parent, 0, 0, p2x, p2y, ex, ey, absolute)\n    }\n\n    get parentIsCurve(): boolean { return !!(this.parent as any).getType().toLowerCase().match(/q|c|s|t/) }\n\n    get p1x(): number { return this.parentIsCurve ? this.parent.ex * 2 - (this.parent as any).p2x : this.p2x };\n    set p1x(val: number) { this.data.p1x = val }\n\n    get p1y(): number { return this.parentIsCurve ? this.parent.ey * 2 - (this.parent as any).p2y : this.p2y };\n    set p1y(val: number) { this.data.p1y = val }\n\n    render(context: CanvasRenderingContext2D): void {\n        context.bezierCurveTo(this.p1x, this.p1y, this.p2x, this.p2y, this.ex, this.ey)\n    }\n\n    toPathString(): string {\n        return `S${this.p2x},${this.p2y},${this.ex},${this.ey}`\n    }\n}\n\nclass SmoothQuadraticBezierCurve extends Curve {\n    constructor(path: Path, parent: { ex: number, ey: number, getType(): string, p1x?: number, p1y?: number }, ex: number, ey: number, absolute: boolean = false) {\n        super(path, parent, 0, 0, 0, 0, ex, ey, absolute)\n        if (parent.getType().toLowerCase() !== 'q') {\n            this.error = 'Smooth Quadratic BezierCurve previous point must a Quadratic Bezier Curve.'\n        }\n    }\n\n    get p2x(): number { return this.p1x };\n    set p2x(val: number) {}\n\n    get p2y(): number { return this.p1y };\n    set p2y(val: number) {}\n\n    get p1x(): number { return this.parent.ex * 2 - (this.parent as any).p1x }\n    set p1x(val: number) {}\n\n    get p1y(): number { return this.parent.ey * 2 - (this.parent as any).p1y }\n    set p1y(val: number) {}\n\n    render(context: CanvasRenderingContext2D): void {\n        context.quadraticCurveTo(this.p1x, this.p1y, this.ex, this.ey)\n    }\n\n    toPathString(): string {\n        return `T${this.ex},${this.ey}`\n    }\n\n    getPoint(t: number, s: number, p1: number, p2: number, e: number): number {\n        return (1 - t) * (1 - t) * s + 2 * t * (1 - t) * p1 + t * t * e\n    }\n}\n\nclass Arc extends PointBase {\n    rx: number\n    ry: number\n    sweepFlag: number\n    largeArcFlag: number\n    xAxisRotation: number\n\n    constructor(path: Path, parent: { ex: number, ey: number }, rx: number, ry: number, xAxisRotation: number, largeArcFlag: number, sweepFlag: number, x: number, y: number, absolute: boolean = false) {\n        super(path, parent, absolute)\n        this.rx = rx\n        this.ry = ry\n        this.sweepFlag = sweepFlag\n        this.largeArcFlag = largeArcFlag\n        this.xAxisRotation = xAxisRotation\n        this.resetData({\n            ex: x,\n            ey: y\n        })\n    }\n\n    resetData(options: Partial<PointData> & Partial<{ rx: number, ry: number, sweepFlag: number, largeArcFlag: number, xAxisRotation: number }>): void {\n        this.rx = options.rx ? options.rx : this.rx\n        this.ry = options.ry ? options.ry : this.ry\n        this.sweepFlag = options.sweepFlag ? options.sweepFlag : this.sweepFlag\n        this.largeArcFlag = options.largeArcFlag ? options.largeArcFlag : this.largeArcFlag\n        this.xAxisRotation = options.xAxisRotation ? options.xAxisRotation : this.xAxisRotation\n        super.resetData(options)\n    }\n\n    getStep(): number {\n        return 100\n    }\n\n    render(context: CanvasRenderingContext2D): void {\n        let steps = this.getStep()\n        for (let i = 0; i < steps; i += 1) {\n            let p = this.getLinePosition(i / steps)\n            context.lineTo(p.x, p.y)\n        }\n    }\n\n    toPathString(): string {\n        return `A${this.rx},${this.ry},${this.xAxisRotation},${this.largeArcFlag},${this.sweepFlag},${this.ex},${this.ey}`\n    }\n\n    angleBetween(v0: Point, v1: Point): number {\n        var p = v0.x * v1.x + v0.y * v1.y\n        var n = Math.sqrt((Math.pow(v0.x, 2) + Math.pow(v0.y, 2)) * (Math.pow(v1.x, 2) + Math.pow(v1.y, 2)))\n        var sign = v0.x * v1.y - v0.y * v1.x < 0 ? -1 : 1\n        var angle = sign * Math.acos(p / n)\n        return angle\n    }\n\n    getLinePosition(per: number): Point {\n        var rx = Math.abs(this.rx)\n        var ry = Math.abs(this.ry)\n        var prx = Math.pow(rx, 2)\n        var pry = Math.pow(ry, 2)\n        var xAxisRotationRadians = (this.xAxisRotation % 360) * (Math.PI / 180)\n        var xAxisRotationRadiansCos = Math.cos(xAxisRotationRadians)\n        var xAxisRotationRadiansSin = Math.sin(xAxisRotationRadians)\n\n        if (this.sx === this.ex && this.sy === this.ey) {\n            return { x: this.sx, y: this.sy }\n        }\n\n        if (rx === 0 || ry === 0) {\n            return {\n                x: this.sx * (1 - per) + this.ex * per,\n                y: this.sy * (1 - per) + this.ey * per\n            }\n        }\n\n        var dx = (this.sx - this.ex) / 2\n        var dy = (this.sy - this.ey) / 2\n        var transformedPoint = {\n            x: xAxisRotationRadiansCos * dx + xAxisRotationRadiansSin * dy,\n            y: -xAxisRotationRadiansSin * dx + xAxisRotationRadiansCos * dy\n        }\n\n        var pTransformedPointX = Math.pow(transformedPoint.x, 2)\n        var pTransformedPointY = Math.pow(transformedPoint.y, 2)\n        var radiiCheck = pTransformedPointX / prx + pTransformedPointY / pry\n        if (radiiCheck > 1) {\n            var radiiCheckSqrt = Math.sqrt(radiiCheck)\n            rx = radiiCheckSqrt * rx\n            ry = radiiCheckSqrt * ry\n        }\n\n        var cSquareNumerator = prx * pry - prx * pTransformedPointY - pry * pTransformedPointX\n        var cSquareRootDenom = prx * pTransformedPointY + pry * pTransformedPointX\n        var cRadicand = cSquareNumerator / cSquareRootDenom\n        cRadicand = cRadicand < 0 ? 0 : cRadicand\n        var cCoef = (this.largeArcFlag !== this.sweepFlag ? 1 : -1) * Math.sqrt(cRadicand)\n        var transformedCenter = {\n            x: cCoef * ((rx * transformedPoint.y) / ry),\n            y: cCoef * (-(ry * transformedPoint.x) / rx)\n        }\n\n        var center = {\n            x: xAxisRotationRadiansCos * transformedCenter.x - xAxisRotationRadiansSin * transformedCenter.y + ((this.sx + this.ex) / 2),\n            y: xAxisRotationRadiansSin * transformedCenter.x + xAxisRotationRadiansCos * transformedCenter.y + ((this.sy + this.ey) / 2)\n        }\n\n        var startVector = {\n            x: (transformedPoint.x - transformedCenter.x) / rx,\n            y: (transformedPoint.y - transformedCenter.y) / ry\n        }\n        var startAngle = this.angleBetween({\n            x: 1,\n            y: 0\n        }, startVector)\n\n        var endVector = {\n            x: (-transformedPoint.x - transformedCenter.x) / rx,\n            y: (-transformedPoint.y - transformedCenter.y) / ry\n        }\n\n        var sweepAngle = this.angleBetween(startVector, endVector)\n        var cir = 2 * Math.PI\n\n        if (!this.sweepFlag && sweepAngle > 0) {\n            sweepAngle -= cir\n        } else if (this.sweepFlag && sweepAngle < 0) {\n            sweepAngle += cir\n        }\n\n        sweepAngle %= cir\n\n        var angle = startAngle + (sweepAngle * per)\n        var ellipseComponentX = rx * Math.cos(angle)\n        var ellipseComponentY = ry * Math.sin(angle)\n\n        return {\n            x: xAxisRotationRadiansCos * ellipseComponentX - xAxisRotationRadiansSin * ellipseComponentY + center.x,\n            y: xAxisRotationRadiansSin * ellipseComponentX + xAxisRotationRadiansCos * ellipseComponentY + center.y\n        }\n    }\n\n    getDistance(p1: Point, p2: Point): number {\n        return Supports.getDistance(p1.x, p1.y, p2.x, p2.y)\n    }\n\n    getLength(): number {\n        if (Compatibility.GeometryElement) {\n            return Supports.getSvgLength(`M${this.sx},${this.sy}` + this.toPathString())\n        }\n        var steps = this.getStep()\n        var resultantArcLength = 0\n        var prevPoint = this.getLinePosition(0)\n        var nextPoint\n        for (var i = 0; i < steps; i++) {\n            var t = Math.min(Math.max(i * (1 / steps), 0), 1)\n            nextPoint = this.getLinePosition(t)\n            resultantArcLength += this.getDistance(prevPoint, nextPoint)\n            prevPoint = nextPoint\n        }\n        nextPoint = this.getLinePosition(1)\n        resultantArcLength += this.getDistance(prevPoint, nextPoint)\n        return resultantArcLength\n    }\n}\n\nclass ClosePath extends LineTo {\n    constructor(path: Path, parent: { ex: number, ey: number }, target: { ex: number, ey: number, absolute: boolean }) {\n        super(path, parent, target.ex, target.ey, target.absolute)\n    }\n\n    render(context: CanvasRenderingContext2D): void {\n        context.closePath()\n    }\n\n    toPathString(): string {\n        return 'z'\n    }\n}\n\nconst Compatibility = {\n    GeometryElement: (() => {\n        try {\n            Supports.getSvgLength('M0,0')\n            return true\n        } catch (error) {\n            return false\n        }\n    })()\n}\n\nPointBase.MoveTo = MoveTo\nPointBase.LineTo = LineTo\nPointBase.HorizontalLineTo = HorizontalLineTo\nPointBase.VerticalLineTo = VerticalLineTo\nPointBase.Curve = Curve\nPointBase.QuadraticBezierCurve = QuadraticBezierCurve\nPointBase.SmoothCurve = SmoothCurve\nPointBase.SmoothQuadraticBezierCurve = SmoothQuadraticBezierCurve\nPointBase.Arc = Arc\nPointBase.ClosePath = ClosePath\n\nexport default Path\n", "import Path from './path'\n\nclass Main {\n    private _core: Path\n\n    constructor(data?: string, mode?: 'path' | 'polygon' | 'polyline') {\n        this._core = new Path(data, mode)\n    }\n\n    setCache(enable: boolean): void {\n        this._core.setCache(enable)\n    }\n\n    addPath(path: Main): Main {\n        if (path instanceof Main) {\n            this._core.addPath(path._core)\n            return this\n        } else {\n            this.systemError('addPath', 'Object not a Ppath2D data.', path)\n        }\n    }\n\n    render(context: CanvasRenderingContext2D): void {\n        this._core.render(context)\n    }\n\n    toPathString(): string {\n        return this._core.toPathString()\n    }\n\n    getRect(): { x: number, y: number, width: number, height: number } {\n        return this._core.getRect()\n    }\n\n    getLastPosition(): { x: number, y: number } {\n        return this._core.getLastPosition()\n    }\n\n    getLinePosition(t: number): { x: number, y: number } {\n        return this._core.getLinePosition(t)\n    }\n\n    getDirection(t: number): number {\n        return this._core.getDirection(t)\n    }\n\n    moveTo(x: number, y: number, abs?: boolean): Main {\n        this._core.moveTo(x, y, abs)\n        return this\n    }\n\n    lineTo(x: number, y: number, abs?: boolean): Main {\n        this._core.lineTo(x, y, abs)\n        return this\n    }\n\n    curve(x1: number, y1: number, x2: number, y2: number, x: number, y: number, abs?: boolean): Main {\n        this._core.curve(x1, y1, x2, y2, x, y, abs)\n        return this\n    }\n\n    quadraticBezierCurve(x1: number, y1: number, x: number, y: number, abs?: boolean): Main {\n        this._core.quadraticBezierCurve(x1, y1, x, y, abs)\n        return this\n    }\n\n    smoothCurve(x2: number, y2: number, x: number, y: number, abs?: boolean): Main {\n        this._core.smoothCurve(x2, y2, x, y, abs)\n        return this\n    }\n\n    smoothQuadraticBezierCurve(x: number, y: number, abs?: boolean): Main {\n        this._core.smoothQuadraticBezierCurve(x, y, abs)\n        return this\n    }\n\n    horizontalLineTo(x: number, abs?: boolean): Main {\n        this._core.horizontalLineTo(x, abs)\n        return this\n    }\n\n    verticalLineTo(y: number, abs?: boolean): Main {\n        this._core.verticalLineTo(y, abs)\n        return this\n    }\n\n    arc(rx: number, ry: number, rotation: number, large: number, sweep: number, x: number, y: number, abs?: boolean): Main {\n        this._core.arc(rx, ry, rotation, large, sweep, x, y, abs)\n        return this\n    }\n\n    closePath(): Main {\n        this._core.closePath()\n        return this\n    }\n\n    private systemError(functionName: string, message: string, object: any = 'no_message'): never {\n        if (object !== 'no_message') {\n            console.log('%c error object is : ', 'color:#FFF; background:red')\n            console.log(object)\n        }\n        throw new Error(`(\u2609\u0434\u2299)!! Main => ${functionName} -> ${message}`)\n    }\n}\n\nexport default Main\n"],
  "mappings": "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",
  "names": ["ModuleBase", "name", "__publicField", "functionName", "message", "object", "base_default", "Path", "base_default", "data", "mode", "__publicField", "list", "paramCounts", "chunkArray", "arr", "size", "result", "i", "keys", "index", "params", "param", "pt", "key", "t", "d", "count", "units", "isAbs", "unit", "pos", "callback", "len", "point", "enable", "path", "context", "string", "p", "target", "site", "dis", "range", "length", "minX", "minY", "maxX", "maxY", "updateBounds", "x", "y", "PointBase", "to", "p1", "p2", "Supports", "abs", "x1", "y1", "x2", "y2", "rx", "ry", "rotation", "large", "sweep", "ax", "ay", "angle", "pathElement", "parent", "absolute", "val", "options", "MoveTo", "LineTo", "HorizontalLineTo", "VerticalLineTo", "Curve", "s", "e", "Compatibility", "steps", "previousDotX", "previousDotY", "diffX", "diffY", "QuadraticBezierCurve", "p1x", "p1y", "ex", "ey", "SmoothCurve", "p2x", "p2y", "SmoothQuadraticBezierCurve", "Arc", "xAxisRotation", "largeArcFlag", "sweepFlag", "v0", "v1", "n", "sign", "per", "prx", "pry", "xAxisRotationRadians", "xAxisRotationRadiansCos", "xAxisRotationRadiansSin", "dx", "dy", "transformedPoint", "pTransformedPointX", "pTransformedPointY", "radiiCheck", "radiiCheckSqrt", "cSquareNumerator", "cSquareRootDenom", "cRadicand", "cCoef", "transformedCenter", "center", "startVector", "startAngle", "endVector", "sweepAngle", "cir", "ellipseComponentX", "ellipseComponentY", "resultantArcLength", "prevPoint", "nextPoint", "ClosePath", "path_default", "Main", "_Main", "data", "mode", "__publicField", "path_default", "enable", "path", "context", "x", "y", "abs", "x1", "y1", "x2", "y2", "rx", "ry", "rotation", "large", "sweep", "functionName", "message", "object", "index_default"]
}
